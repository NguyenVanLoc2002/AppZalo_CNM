{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport config from \"./config\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-toast-message\";\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL\n});\naxiosInstance.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    try {\n      config.headers[\"User-Agent\"] = \"Mobile\";\n      if (!config.url.includes(\"/auth/login\")) {\n        var token = JSON.parse(yield AsyncStorage.getItem(\"accessToken\"));\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n      }\n      return config;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest.url.includes(\"auth/login\")) {\n      try {\n        var refreshToken = JSON.parse(yield AsyncStorage.getItem(\"refreshToken\"));\n        if (!refreshToken) {\n          showErrorToast(\"Your session has expired. Please login again.\");\n          throw new Error(\"No refresh token available.\");\n        }\n        var refreshedTokenResponse = yield axiosInstance.post(\"/auth/refreshToken\", {\n          refreshToken: refreshToken\n        });\n        var newAccessToken = refreshedTokenResponse.data.newAccessToken;\n        AsyncStorage.setItem(\"accessToken\", JSON.stringify(newAccessToken));\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Refresh token failed:\", refreshError);\n        showErrorToast(\"Your session has expired. Please login again.\");\n        yield AsyncStorage.clear();\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar showErrorToast = function showErrorToast(message) {\n  Toast.show({\n    type: \"error\",\n    text1: \"Error\",\n    text2: message,\n    position: \"bottom\",\n    visibilityTime: 4000,\n    autoHide: true\n  });\n};\nexport default axiosInstance;","map":{"version":3,"names":["axios","config","AsyncStorage","Toast","axiosInstance","create","baseURL","interceptors","request","use","_ref","_asyncToGenerator","headers","url","includes","token","JSON","parse","getItem","Authorization","error","Promise","reject","_x","apply","arguments","response","_ref2","originalRequest","status","refreshToken","showErrorToast","Error","refreshedTokenResponse","post","newAccessToken","data","setItem","stringify","refreshError","console","clear","_x2","message","show","type","text1","text2","position","visibilityTime","autoHide"],"sources":["D:/NodeJS/ZaloFake/Frontend/Mobile/zalofake/src/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\nimport config from \"./config\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport Toast from \"react-native-toast-message\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  async (config) => {\r\n    try {\r\n      config.headers[\"User-Agent\"] = \"Mobile\";\r\n      if (!config.url.includes(\"/auth/login\")) {\r\n        const token = JSON.parse(await AsyncStorage.getItem(\"accessToken\"));\r\n        // console.log(token);\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n      }\r\n      return config;\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (\r\n      error.response.status === 401 &&\r\n      !originalRequest.url.includes(\"auth/login\")\r\n    ) {\r\n      try {\r\n        const refreshToken = JSON.parse(\r\n          await AsyncStorage.getItem(\"refreshToken\")\r\n        );\r\n        if (!refreshToken) {\r\n          showErrorToast(\"Your session has expired. Please login again.\");\r\n          throw new Error(\"No refresh token available.\");\r\n        }\r\n\r\n        const refreshedTokenResponse = await axiosInstance.post(\r\n          \"/auth/refreshToken\",\r\n          {\r\n            refreshToken: refreshToken,\r\n          }\r\n        );\r\n        const newAccessToken = refreshedTokenResponse.data.newAccessToken;\r\n        AsyncStorage.setItem(\"accessToken\", JSON.stringify(newAccessToken));\r\n\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return axiosInstance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"Refresh token failed:\", refreshError);\r\n        showErrorToast(\"Your session has expired. Please login again.\");\r\n        await AsyncStorage.clear();\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst showErrorToast = (message) => {\r\n  Toast.show({\r\n    type: \"error\",\r\n    text1: \"Error\",\r\n    text2: message,\r\n    position: \"bottom\",\r\n    visibilityTime: 4000,\r\n    autoHide: true,\r\n  });\r\n};\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}