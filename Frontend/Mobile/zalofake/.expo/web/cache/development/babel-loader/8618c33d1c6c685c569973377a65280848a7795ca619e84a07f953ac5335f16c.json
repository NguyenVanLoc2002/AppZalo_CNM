{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport config from \"./config\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL\n});\naxiosInstance.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    if (Platform.OS === \"web\") {} else if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\n      try {\n        var token = yield AsyncStorage.getItem(\"accessToken\");\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    if (Platform.OS === \"web\") {} else if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\n      var originalRequest = error.config;\n      if (error.response.status === 401) {\n        try {\n          var refreshToken = yield AsyncStorage.getItem(\"refreshToken\");\n          if (!refreshToken) {\n            toast.error(\"Your session has expired. Please login again.\");\n            throw new Error(\"No refresh token available.\");\n          }\n          var refreshedTokenResponse = yield axiosInstance.post(\"/auth/refreshToken\", {\n            refreshToken: refreshToken\n          });\n          var newAccessToken = refreshedTokenResponse.data.newAccessToken;\n          yield AsyncStorage.setItem(\"accessToken\", newAccessToken);\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          return axiosInstance(originalRequest);\n        } catch (refreshError) {\n          console.error(\"Refresh token failed:\", refreshError);\n          toast.error(\"Your session has expired. Please login again.\");\n          yield AsyncStorage.clear();\n          window.location.href = \"/login\";\n          return Promise.reject(refreshError);\n        }\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport default axiosInstance;","map":{"version":3,"names":["axios","config","Platform","AsyncStorage","axiosInstance","create","baseURL","interceptors","request","use","_ref","_asyncToGenerator","OS","token","getItem","headers","Authorization","error","Promise","reject","_x","apply","arguments","response","_ref2","originalRequest","status","refreshToken","toast","Error","refreshedTokenResponse","post","newAccessToken","data","setItem","refreshError","console","clear","window","location","href","_x2"],"sources":["C:/Users/huynh/OneDrive/Desktop/ZaloFake/AppZalo_CNM/Frontend/Mobile/zalofake/src/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\nimport config from \"./config\";\r\nimport { Platform } from \"react-native\"; // Import Platform từ 'react-native'\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"; // Import AsyncStorage từ '@react-native-async-storage/async-storage' cho React Native\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  async (config) => {\r\n    if (Platform.OS === \"web\") {\r\n      // Kiểm tra nếu đang chạy trên Web\r\n      // Thực hiện các xử lý cho môi trường Web\r\n    } else if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\r\n      // Kiểm tra nếu đang chạy trên React Native\r\n      try {\r\n        const token = await AsyncStorage.getItem(\"accessToken\"); // Sử dụng AsyncStorage cho React Native\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n      } catch (error) {\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    if (Platform.OS === \"web\") {\r\n      // Kiểm tra nếu đang chạy trên Web\r\n      // Thực hiện các xử lý cho môi trường Web\r\n    } else if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\r\n      // Kiểm tra nếu đang chạy trên React Native\r\n      const originalRequest = error.config;\r\n\r\n      if (error.response.status === 401) {\r\n        try {\r\n          const refreshToken = await AsyncStorage.getItem(\"refreshToken\"); // Sử dụng AsyncStorage cho React Native\r\n          if (!refreshToken) {\r\n            toast.error(\"Your session has expired. Please login again.\");\r\n            throw new Error(\"No refresh token available.\");\r\n          }\r\n\r\n          const refreshedTokenResponse = await axiosInstance.post(\r\n            \"/auth/refreshToken\",\r\n            {\r\n              refreshToken: refreshToken,\r\n            }\r\n          );\r\n          const newAccessToken = refreshedTokenResponse.data.newAccessToken;\r\n          await AsyncStorage.setItem(\"accessToken\", newAccessToken); // Sử dụng AsyncStorage cho React Native\r\n\r\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n          return axiosInstance(originalRequest);\r\n        } catch (refreshError) {\r\n          console.error(\"Refresh token failed:\", refreshError);\r\n          toast.error(\"Your session has expired. Please login again.\");\r\n          await AsyncStorage.clear(); // Sử dụng AsyncStorage cho React Native\r\n          window.location.href = \"/login\"; // Chuyển hướng người dùng đến trang đăng nhập (Chỉ áp dụng cho Web, bạn cần thay đổi tương ứng cho React Native)\r\n          return Promise.reject(refreshError);\r\n        }\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}