{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport Toast from \"react-native-toast-message\";\nimport OTPTextView from \"react-native-otp-textinput\";\nimport axiosInstance from \"../api/axiosInstance\";\nvar useRegister = function useRegister() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    systemOTP = _useState4[0],\n    setSystemOTP = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isOTPVerified = _useState6[0],\n    setIsOTPVerified = _useState6[1];\n  var showToastSuccess = function showToastSuccess(notice) {\n    Toast.show({\n      text1: notice,\n      type: \"success\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  var showToastError = function showToastError(notice) {\n    Toast.show({\n      text1: notice,\n      type: \"error\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  var verifyOTP = function () {\n    var _ref = _asyncToGenerator(function* (userOTP, systemOTP) {\n      if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return function verifyOTP(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var sendOTP = function () {\n    var _ref2 = _asyncToGenerator(function* (email) {\n      var response = yield axiosInstance.post(\"/auth/send-otp\", {\n        email: email\n      });\n      var data = response.data;\n      return data.totp;\n    });\n    return function sendOTP(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getOTP = function () {\n    var _ref3 = _asyncToGenerator(function* (email) {\n      var checkEmai = yield check_mail(email);\n      if (checkEmai) {\n        showToastError(\"Email already exists\");\n        setIsLoading(false);\n        return false;\n      } else {\n        try {\n          setIsLoading(true);\n          setIsOTPVerified(false);\n          var otp = yield sendOTP(email);\n          if (otp) {\n            showToastSuccess(\"OTP sent to your email\");\n            setIsLoading(false);\n            setSystemOTP(otp);\n            return true;\n          } else {\n            showToastError(\"Failed to send OTP\");\n            setIsLoading(false);\n            return false;\n          }\n        } catch (error) {\n          console.log(error);\n          showToastError(\"Failed to send OTP\");\n          setIsLoading(false);\n          return false;\n        }\n      }\n    });\n    return function getOTP(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var verifyEmailAndRegister = function () {\n    var _ref4 = _asyncToGenerator(function* (textEmail, otp, textPhone, name, dob, selectedGender, textPW) {\n      var verified = yield verifyOTP(otp, systemOTP);\n      setIsOTPVerified(verified);\n      try {\n        setIsLoading(true);\n        if (verified) {\n          var response = yield axiosInstance.post(\"/auth/register\", {\n            phone: textPhone,\n            email: textEmail,\n            password: textPW,\n            name: name,\n            dob: dob,\n            gender: selectedGender.toString(),\n            userOTP: otp\n          });\n          setIsOTPVerified(true);\n          var data = response.data;\n          console.log(data);\n          if (response.status === 201) {\n            setIsLoading(false);\n            showToastSuccess(\"Account created successfully\");\n            return true;\n          } else {\n            setIsLoading(false);\n            showToastError(data.response.message);\n            return false;\n          }\n        } else {\n          showToastError(\"Invalid OTP\");\n          setIsLoading(false);\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        setIsOTPVerified(true);\n        setIsLoading(false);\n        showToastError(error.response.data.message);\n        return false;\n      }\n    });\n    return function verifyEmailAndRegister(_x5, _x6, _x7, _x8, _x9, _x10, _x11) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var check_mail = function () {\n    var _ref5 = _asyncToGenerator(function* (email) {\n      try {\n        var response = yield axiosInstance.post(\"/users/check-email\", {\n          email: email\n        });\n        if (response.status === 404) {\n          return false;\n        } else if (response.status === 200) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (error) {\n        return false;\n      }\n    });\n    return function check_mail(_x12) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var GetSystemOTP = function GetSystemOTP() {\n    return systemOTP;\n  };\n  return {\n    isOTPVerified: isOTPVerified,\n    getOTP: getOTP,\n    verifyEmailAndRegister: verifyEmailAndRegister,\n    showToastError: showToastError,\n    showToastSuccess: showToastSuccess,\n    verifyOTP: verifyOTP,\n    GetSystemOTP: GetSystemOTP\n  };\n};\nexport default useRegister;","map":{"version":3,"names":["useState","Toast","OTPTextView","axiosInstance","useRegister","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","systemOTP","setSystemOTP","_useState5","_useState6","isOTPVerified","setIsOTPVerified","showToastSuccess","notice","show","text1","type","topOffset","position","showToastError","verifyOTP","_ref","_asyncToGenerator","userOTP","otp","expires","Date","now","_x","_x2","apply","arguments","sendOTP","_ref2","email","response","post","data","totp","_x3","getOTP","_ref3","checkEmai","check_mail","error","console","log","_x4","verifyEmailAndRegister","_ref4","textEmail","textPhone","name","dob","selectedGender","textPW","verified","phone","password","gender","toString","status","message","_x5","_x6","_x7","_x8","_x9","_x10","_x11","_ref5","_x12","GetSystemOTP"],"sources":["D:/NodeJS/ZaloFake/Frontend/Mobile/zalofake/src/hooks/useRegister.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport OTPTextView from \"react-native-otp-textinput\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\n\r\nconst useRegister = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [systemOTP, setSystemOTP] = useState(null);\r\n  const [isOTPVerified, setIsOTPVerified] = useState(false);\r\n\r\n  const showToastSuccess = (notice) => {\r\n    Toast.show({\r\n      text1: notice,\r\n      type: \"success\",\r\n      topOffset: 0,\r\n      position: \"top\",\r\n    });\r\n  };\r\n  const showToastError = (notice) => {\r\n    Toast.show({\r\n      text1: notice,\r\n      type: \"error\",\r\n      topOffset: 0,\r\n      position: \"top\",\r\n    });\r\n  };\r\n\r\n  const verifyOTP = async (userOTP, systemOTP) => {\r\n    if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const sendOTP = async (email) => {\r\n    const response = await axiosInstance.post(\"/auth/send-otp\", {\r\n      email,\r\n    });\r\n    const data = response.data;\r\n    return data.totp;\r\n  };\r\n\r\n  const getOTP = async (email) => {\r\n    const checkEmai = await check_mail(email);\r\n    if (checkEmai) {\r\n      showToastError(\"Email already exists\");\r\n      setIsLoading(false);\r\n      return false;\r\n    } else {\r\n      try {\r\n        setIsLoading(true);\r\n        setIsOTPVerified(false);\r\n        const otp = await sendOTP(email);\r\n        if (otp) {\r\n          showToastSuccess(\"OTP sent to your email\");\r\n          setIsLoading(false);\r\n          setSystemOTP(otp);\r\n          return true;\r\n        } else {\r\n          showToastError(\"Failed to send OTP\");\r\n          setIsLoading(false);\r\n          return false;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        showToastError(\"Failed to send OTP\");\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  const verifyEmailAndRegister = async (\r\n    textEmail,\r\n    otp,\r\n    textPhone,\r\n    name,\r\n    dob,\r\n    selectedGender,\r\n    textPW\r\n  ) => {\r\n    const verified = await verifyOTP(otp, systemOTP);\r\n    setIsOTPVerified(verified);\r\n    try {\r\n      setIsLoading(true);\r\n      if (verified) {\r\n        const response = await axiosInstance.post(\"/auth/register\", {\r\n          phone: textPhone,\r\n          email: textEmail,\r\n          password: textPW,\r\n          name: name,\r\n          dob: dob,\r\n          gender: selectedGender.toString(),\r\n          userOTP: otp,\r\n        });\r\n        setIsOTPVerified(true);\r\n        const data = response.data;\r\n        console.log(data);\r\n\r\n        if (response.status === 201) {\r\n          setIsLoading(false);\r\n          showToastSuccess(\"Account created successfully\");\r\n          return true;\r\n        } else {\r\n          setIsLoading(false);\r\n          showToastError(data.response.message);\r\n          return false;\r\n        }\r\n      } else {\r\n        showToastError(\"Invalid OTP\");\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setIsOTPVerified(true);\r\n      setIsLoading(false);\r\n      showToastError(error.response.data.message);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const check_mail = async (email) => {\r\n    try {\r\n      const response = await axiosInstance.post(\"/users/check-email\", {\r\n        email,\r\n      });\r\n      if (response.status === 404) {\r\n        return false;\r\n      } else if (response.status === 200) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n  const GetSystemOTP = () => {\r\n    return systemOTP;\r\n  };\r\n\r\n  return {\r\n    isOTPVerified,\r\n    getOTP,\r\n    verifyEmailAndRegister,\r\n    showToastError,\r\n    showToastSuccess,\r\n    verifyOTP,\r\n    GetSystemOTP,\r\n  };\r\n};\r\n\r\nexport default useRegister;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,4BAA4B;AAC9C,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,aAAa;AAEpB,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EACxB,IAAAC,SAAA,GAAkCL,QAAQ,CAAC,KAAK,CAAC;IAAAM,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,UAAA,GAAkCV,QAAQ,CAAC,IAAI,CAAC;IAAAW,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAA0Cd,QAAQ,CAAC,KAAK,CAAC;IAAAe,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAlDE,aAAa,GAAAD,UAAA;IAAEE,gBAAgB,GAAAF,UAAA;EAEtC,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,MAAM,EAAK;IACnClB,KAAK,CAACmB,IAAI,CAAC;MACTC,KAAK,EAAEF,MAAM;MACbG,IAAI,EAAE,SAAS;MACfC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EACD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIN,MAAM,EAAK;IACjClB,KAAK,CAACmB,IAAI,CAAC;MACTC,KAAK,EAAEF,MAAM;MACbG,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,IAAME,SAAS;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAO,EAAEjB,SAAS,EAAK;MAC9C,IAAIiB,OAAO,KAAKjB,SAAS,CAACkB,GAAG,IAAIlB,SAAS,CAACmB,OAAO,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAChE,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC;IAAA,gBANKP,SAASA,CAAAQ,EAAA,EAAAC,GAAA;MAAA,OAAAR,IAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAMd;EAED,IAAMC,OAAO;IAAA,IAAAC,KAAA,GAAAX,iBAAA,CAAG,WAAOY,KAAK,EAAK;MAC/B,IAAMC,QAAQ,SAAStC,aAAa,CAACuC,IAAI,CAAC,gBAAgB,EAAE;QAC1DF,KAAK,EAALA;MACF,CAAC,CAAC;MACF,IAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1B,OAAOA,IAAI,CAACC,IAAI;IAClB,CAAC;IAAA,gBANKN,OAAOA,CAAAO,GAAA;MAAA,OAAAN,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAMZ;EAED,IAAMS,MAAM;IAAA,IAAAC,KAAA,GAAAnB,iBAAA,CAAG,WAAOY,KAAK,EAAK;MAC9B,IAAMQ,SAAS,SAASC,UAAU,CAACT,KAAK,CAAC;MACzC,IAAIQ,SAAS,EAAE;QACbvB,cAAc,CAAC,sBAAsB,CAAC;QACtChB,YAAY,CAAC,KAAK,CAAC;QACnB,OAAO,KAAK;MACd,CAAC,MAAM;QACL,IAAI;UACFA,YAAY,CAAC,IAAI,CAAC;UAClBQ,gBAAgB,CAAC,KAAK,CAAC;UACvB,IAAMa,GAAG,SAASQ,OAAO,CAACE,KAAK,CAAC;UAChC,IAAIV,GAAG,EAAE;YACPZ,gBAAgB,CAAC,wBAAwB,CAAC;YAC1CT,YAAY,CAAC,KAAK,CAAC;YACnBI,YAAY,CAACiB,GAAG,CAAC;YACjB,OAAO,IAAI;UACb,CAAC,MAAM;YACLL,cAAc,CAAC,oBAAoB,CAAC;YACpChB,YAAY,CAAC,KAAK,CAAC;YACnB,OAAO,KAAK;UACd;QACF,CAAC,CAAC,OAAOyC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;UAClBzB,cAAc,CAAC,oBAAoB,CAAC;UACpChB,YAAY,CAAC,KAAK,CAAC;UACnB,OAAO,KAAK;QACd;MACF;IACF,CAAC;IAAA,gBA5BKqC,MAAMA,CAAAO,GAAA;MAAA,OAAAN,KAAA,CAAAX,KAAA,OAAAC,SAAA;IAAA;EAAA,GA4BX;EAED,IAAMiB,sBAAsB;IAAA,IAAAC,KAAA,GAAA3B,iBAAA,CAAG,WAC7B4B,SAAS,EACT1B,GAAG,EACH2B,SAAS,EACTC,IAAI,EACJC,GAAG,EACHC,cAAc,EACdC,MAAM,EACH;MACH,IAAMC,QAAQ,SAASpC,SAAS,CAACI,GAAG,EAAElB,SAAS,CAAC;MAChDK,gBAAgB,CAAC6C,QAAQ,CAAC;MAC1B,IAAI;QACFrD,YAAY,CAAC,IAAI,CAAC;QAClB,IAAIqD,QAAQ,EAAE;UACZ,IAAMrB,QAAQ,SAAStC,aAAa,CAACuC,IAAI,CAAC,gBAAgB,EAAE;YAC1DqB,KAAK,EAAEN,SAAS;YAChBjB,KAAK,EAAEgB,SAAS;YAChBQ,QAAQ,EAAEH,MAAM;YAChBH,IAAI,EAAEA,IAAI;YACVC,GAAG,EAAEA,GAAG;YACRM,MAAM,EAAEL,cAAc,CAACM,QAAQ,CAAC,CAAC;YACjCrC,OAAO,EAAEC;UACX,CAAC,CAAC;UACFb,gBAAgB,CAAC,IAAI,CAAC;UACtB,IAAM0B,IAAI,GAAGF,QAAQ,CAACE,IAAI;UAC1BQ,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;UAEjB,IAAIF,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;YAC3B1D,YAAY,CAAC,KAAK,CAAC;YACnBS,gBAAgB,CAAC,8BAA8B,CAAC;YAChD,OAAO,IAAI;UACb,CAAC,MAAM;YACLT,YAAY,CAAC,KAAK,CAAC;YACnBgB,cAAc,CAACkB,IAAI,CAACF,QAAQ,CAAC2B,OAAO,CAAC;YACrC,OAAO,KAAK;UACd;QACF,CAAC,MAAM;UACL3C,cAAc,CAAC,aAAa,CAAC;UAC7BhB,YAAY,CAAC,KAAK,CAAC;UACnB,OAAO,KAAK;QACd;MACF,CAAC,CAAC,OAAOyC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBjC,gBAAgB,CAAC,IAAI,CAAC;QACtBR,YAAY,CAAC,KAAK,CAAC;QACnBgB,cAAc,CAACyB,KAAK,CAACT,QAAQ,CAACE,IAAI,CAACyB,OAAO,CAAC;QAC3C,OAAO,KAAK;MACd;IACF,CAAC;IAAA,gBAhDKd,sBAAsBA,CAAAe,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA,OAAApB,KAAA,CAAAnB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAgD3B;EAED,IAAMY,UAAU;IAAA,IAAA2B,KAAA,GAAAhD,iBAAA,CAAG,WAAOY,KAAK,EAAK;MAClC,IAAI;QACF,IAAMC,QAAQ,SAAStC,aAAa,CAACuC,IAAI,CAAC,oBAAoB,EAAE;UAC9DF,KAAK,EAALA;QACF,CAAC,CAAC;QACF,IAAIC,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;UAC3B,OAAO,KAAK;QACd,CAAC,MAAM,IAAI1B,QAAQ,CAAC0B,MAAM,KAAK,GAAG,EAAE;UAClC,OAAO,IAAI;QACb,CAAC,MAAM;UACL,OAAO,KAAK;QACd;MACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF,CAAC;IAAA,gBAfKD,UAAUA,CAAA4B,IAAA;MAAA,OAAAD,KAAA,CAAAxC,KAAA,OAAAC,SAAA;IAAA;EAAA,GAef;EACD,IAAMyC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzB,OAAOlE,SAAS;EAClB,CAAC;EAED,OAAO;IACLI,aAAa,EAAbA,aAAa;IACb8B,MAAM,EAANA,MAAM;IACNQ,sBAAsB,EAAtBA,sBAAsB;IACtB7B,cAAc,EAAdA,cAAc;IACdP,gBAAgB,EAAhBA,gBAAgB;IAChBQ,SAAS,EAATA,SAAS;IACToD,YAAY,EAAZA;EACF,CAAC;AACH,CAAC;AAED,eAAe1E,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}