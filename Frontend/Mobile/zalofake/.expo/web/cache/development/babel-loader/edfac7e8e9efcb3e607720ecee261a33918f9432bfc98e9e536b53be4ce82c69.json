{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport Toast from \"react-native-toast-message\";\nimport axiosInstance from \"../api/axiosInstance\";\nvar useForgotPw = function useForgotPw() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    systemOTP = _useState4[0],\n    setSystemOTP = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isOTPVerified = _useState6[0],\n    setIsOTPVerified = _useState6[1];\n  var showToastSuccess = function showToastSuccess(notice) {\n    Toast.show({\n      text1: notice,\n      type: \"success\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  var showToastError = function showToastError(notice) {\n    Toast.show({\n      text1: notice,\n      type: \"error\",\n      topOffset: 0,\n      position: \"top\"\n    });\n  };\n  var verifyOTP = function () {\n    var _ref = _asyncToGenerator(function* (userOTP, systemOTP) {\n      if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return function verifyOTP(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var sendOTP = function () {\n    var _ref2 = _asyncToGenerator(function* (email) {\n      var response = yield axiosInstance.post(\"/auth/send-otp\", {\n        email: email\n      });\n      var data = response.data;\n      return data.totp;\n    });\n    return function sendOTP(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var check_mail = function () {\n    var _ref3 = _asyncToGenerator(function* (email) {\n      try {\n        setIsLoading(true);\n        var response = yield axiosInstance.post(\"/users/check-email\", {\n          email: email\n        });\n        if (response.status === 404) {\n          showToastError(response.data.message);\n          return false;\n        } else if (response.status === 200) {\n          setIsLoading(false);\n          return true;\n        } else {\n          setIsLoading(false);\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        setIsLoading(false);\n        showToastError(error.response.data.message);\n        return false;\n      }\n    });\n    return function check_mail(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getOTP = function () {\n    var _ref4 = _asyncToGenerator(function* (email) {\n      try {\n        setIsLoading(true);\n        setIsOTPVerified(false);\n        var otp = yield sendOTP(email);\n        if (otp) {\n          showToastSuccess(\"OTP sent to your email\");\n          setIsLoading(false);\n          setSystemOTP(otp);\n          return true;\n        } else {\n          showToastError(\"Failed to send OTP\");\n          setIsLoading(false);\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        showToastError(\"Failed to send OTP\");\n        setIsLoading(false);\n        return false;\n      }\n    });\n    return function getOTP(_x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleOTP = function () {\n    var _ref5 = _asyncToGenerator(function* (otp) {\n      var verified = yield verifyOTP(otp, systemOTP);\n      setIsOTPVerified(verified);\n      try {\n        setIsLoading(true);\n        if (verified) {\n          showToastSuccess(\"Valid OTP\");\n          setIsOTPVerified(true);\n          setIsLoading(false);\n          return true;\n        } else {\n          showToastError(\"Invalid OTP\");\n          setIsLoading(false);\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        setIsOTPVerified(true);\n        setIsLoading(false);\n        showToastError(error.response.data.message);\n        return false;\n      }\n    });\n    return function handleOTP(_x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var resetPassword = function () {\n    var _ref6 = _asyncToGenerator(function* (email, newPassword) {\n      try {\n        setIsLoading(true);\n        var response = yield axiosInstance.post(\"/auth/reset-password\", {\n          email: email,\n          newPassword: newPassword\n        });\n        if (response.status === 404) {\n          return false;\n        } else if (response.status === 400) {\n          return false;\n        } else if (response.status === 200) {\n          setIsLoading(false);\n          return true;\n        } else {\n          showToastError(\"Failed to reset password\");\n          setIsLoading(false);\n          return false;\n        }\n      } catch (error) {\n        console.log(error);\n        setIsOTPVerified(true);\n        setIsLoading(false);\n        showToastError(error.response.data.message);\n        return false;\n      }\n    });\n    return function resetPassword(_x7, _x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  return {\n    isLoading: isLoading,\n    isOTPVerified: isOTPVerified,\n    getOTP: getOTP,\n    resetPassword: resetPassword,\n    handleOTP: handleOTP,\n    showToastError: showToastError,\n    showToastSuccess: showToastSuccess,\n    check_mail: check_mail\n  };\n};\nexport default useForgotPw;","map":{"version":3,"names":["useState","Toast","axiosInstance","useForgotPw","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","systemOTP","setSystemOTP","_useState5","_useState6","isOTPVerified","setIsOTPVerified","showToastSuccess","notice","show","text1","type","topOffset","position","showToastError","verifyOTP","_ref","_asyncToGenerator","userOTP","otp","expires","Date","now","_x","_x2","apply","arguments","sendOTP","_ref2","email","response","post","data","totp","_x3","check_mail","_ref3","status","message","error","console","log","_x4","getOTP","_ref4","_x5","handleOTP","_ref5","verified","_x6","resetPassword","_ref6","newPassword","_x7","_x8"],"sources":["T:/AllHK/HK8/CongNgheMoi/AppZalo_CNM/Frontend/Mobile/zalofake/src/hooks/useResetPw.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport axiosInstance from \"../api/axiosInstance\";\r\n\r\nconst useForgotPw = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [systemOTP, setSystemOTP] = useState(null);\r\n    const [isOTPVerified, setIsOTPVerified] = useState(false);\r\n\r\n    const showToastSuccess = (notice) => {\r\n        Toast.show({\r\n            text1: notice,\r\n            type: \"success\",\r\n            topOffset: 0,\r\n            position: \"top\",\r\n        });\r\n    };\r\n    const showToastError = (notice) => {\r\n        Toast.show({\r\n            text1: notice,\r\n            type: \"error\",\r\n            topOffset: 0,\r\n            position: \"top\",\r\n        });\r\n    };\r\n\r\n    const verifyOTP = async (userOTP, systemOTP) => {\r\n        if (userOTP === systemOTP.otp && systemOTP.expires >= Date.now()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const sendOTP = async (email) => {\r\n        const response = await axiosInstance.post(\"/auth/send-otp\", {\r\n            email,\r\n        });\r\n        const data = response.data;\r\n        return data.totp;\r\n    };\r\n\r\n    const check_mail = async (email) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await axiosInstance.post(\"/users/check-email\", {\r\n                email,\r\n            });\r\n          \r\n            if(response.status === 404) {\r\n                showToastError(response.data.message);\r\n                return false;\r\n            }\r\n            else if (response.status === 200) {\r\n                setIsLoading(false);\r\n                return true;\r\n            }\r\n            else {\r\n                setIsLoading(false);\r\n                // toast.error(data.response.message);\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsLoading(false);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n    const getOTP = async (email) => {\r\n        try {\r\n            setIsLoading(true);\r\n            setIsOTPVerified(false);\r\n            const otp = await sendOTP(email);\r\n\r\n            if (otp) {\r\n                showToastSuccess(\"OTP sent to your email\");\r\n                setIsLoading(false);\r\n                setSystemOTP(otp);\r\n                return true;\r\n            } else {\r\n                showToastError(\"Failed to send OTP\");\r\n                setIsLoading(false);\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            showToastError(\"Failed to send OTP\");\r\n            setIsLoading(false);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleOTP = async (otp) => {\r\n        const verified = await verifyOTP(otp, systemOTP);\r\n        setIsOTPVerified(verified);\r\n        try {\r\n            setIsLoading(true);\r\n            if (verified) {\r\n                showToastSuccess(\"Valid OTP\")\r\n                setIsOTPVerified(true)\r\n                setIsLoading(false);\r\n                return true;\r\n            }\r\n            else {\r\n                showToastError(\"Invalid OTP\");\r\n                setIsLoading(false);\r\n                return false;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsOTPVerified(true);\r\n            setIsLoading(false);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const resetPassword = async ( email, newPassword) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await axiosInstance.post(\"/auth/reset-password\", {\r\n                email,\r\n                newPassword,\r\n            });\r\n            if(response.status === 404){\r\n                return false;\r\n            }\r\n            else if(response.status === 400){\r\n                return false;\r\n            }\r\n            else if (response.status === 200) {\r\n                setIsLoading(false);\r\n                return true;\r\n            } else {\r\n                showToastError(\"Failed to reset password\")\r\n                setIsLoading(false);\r\n                return false;\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            setIsOTPVerified(true);\r\n            setIsLoading(false);\r\n            showToastError(error.response.data.message);\r\n            return false;\r\n        }\r\n    }\r\n    return {\r\n        isLoading,\r\n        isOTPVerified,\r\n        getOTP,\r\n        resetPassword,\r\n        handleOTP,\r\n        showToastError,\r\n        showToastSuccess,\r\n        check_mail\r\n    };\r\n};\r\n\r\nexport default useForgotPw ;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}