{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport axios from \"axios\";\nimport config from \"./config\";\nimport toast from \"react-hot-toast\";\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL\n});\nvar handleRefreshToken = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var refreshToken = yield AsyncStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      toast.error(\"Your session has expired. Please login again.\");\n      throw new Error(\"No refresh token available.\");\n    }\n    var refreshedTokenResponse = yield axiosInstance.post(\"/auth/refreshToken\", {\n      refreshToken: refreshToken\n    });\n    var newAccessToken = refreshedTokenResponse.data.newAccessToken;\n    yield AsyncStorage.setItem(\"accessToken\", newAccessToken);\n    return newAccessToken;\n  });\n  return function handleRefreshToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\naxiosInstance.interceptors.request.use(function () {\n  var _ref2 = _asyncToGenerator(function* (config) {\n    if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\n      var token = yield AsyncStorage.getItem(\"accessToken\");\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref3 = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    if (error.response.status === 401) {\n      try {\n        var newAccessToken = yield handleRefreshToken();\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Refresh token failed:\", refreshError);\n        toast.error(\"Your session has expired. Please login again.\");\n        yield AsyncStorage.clear();\n        var navigation = useNavigation();\n        navigation.navigate(\"LoginScreen\");\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nexport default axiosInstance;","map":{"version":3,"names":["AsyncStorage","useNavigation","axios","config","toast","axiosInstance","create","baseURL","handleRefreshToken","_ref","_asyncToGenerator","refreshToken","getItem","error","Error","refreshedTokenResponse","post","newAccessToken","data","setItem","apply","arguments","interceptors","request","use","_ref2","Platform","OS","token","headers","Authorization","_x","Promise","reject","response","_ref3","originalRequest","status","refreshError","console","clear","navigation","navigate","_x2"],"sources":["C:/Users/huynh/OneDrive/Desktop/ZaloFake/AppZalo_CNM/Frontend/Mobile/zalofake/src/api/axiosInstance.js"],"sourcesContent":["import { Platform } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nimport axios from \"axios\";\r\nimport config from \"./config\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n});\r\n\r\nconst handleRefreshToken = async () => {\r\n  const refreshToken = await AsyncStorage.getItem(\"refreshToken\");\r\n  if (!refreshToken) {\r\n    toast.error(\"Your session has expired. Please login again.\");\r\n    throw new Error(\"No refresh token available.\");\r\n  }\r\n\r\n  const refreshedTokenResponse = await axiosInstance.post(\r\n    \"/auth/refreshToken\",\r\n    {\r\n      refreshToken: refreshToken,\r\n    }\r\n  );\r\n  const newAccessToken = refreshedTokenResponse.data.newAccessToken;\r\n  await AsyncStorage.setItem(\"accessToken\", newAccessToken);\r\n\r\n  return newAccessToken;\r\n};\r\n\r\naxiosInstance.interceptors.request.use(\r\n  async (config) => {\r\n    if (Platform.OS === \"android\" || Platform.OS === \"ios\") {\r\n      const token = await AsyncStorage.getItem(\"accessToken\");\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response.status === 401) {\r\n      try {\r\n        const newAccessToken = await handleRefreshToken();\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return axiosInstance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"Refresh token failed:\", refreshError);\r\n        toast.error(\"Your session has expired. Please login again.\");\r\n        await AsyncStorage.clear();\r\n        // Sử dụng React Navigation để chuyển hướng người dùng\r\n        const navigation = useNavigation();\r\n        navigation.navigate(\"LoginScreen\");\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}