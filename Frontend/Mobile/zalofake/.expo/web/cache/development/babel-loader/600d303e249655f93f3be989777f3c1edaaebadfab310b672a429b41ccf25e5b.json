{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from \"axios\";\nimport config from \"./config\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Toast from \"react-native-toast-message\";\nvar axiosInstance = axios.create({\n  baseURL: config.baseURL\n});\naxiosInstance.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    try {\n      var token = yield AsyncStorage.getItem(\"accessToken\");\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    } catch (error) {\n      console.error(\"Error getting access token from AsyncStorage:\", error);\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function () {\n  var _ref2 = _asyncToGenerator(function* (response) {\n    return response;\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}(), function () {\n  var _ref3 = _asyncToGenerator(function* (error) {\n    var originalRequest = error.config;\n    var reqURL = originalRequest.url;\n    if (error.response && error.response.status === 401 && !reqURL.includes(\"/auth/login\")) {\n      try {\n        var _refreshedTokenRespon;\n        var refreshToken = yield AsyncStorage.getItem(\"refreshToken\");\n        if (!refreshToken) {\n          Toast.show({\n            text1: \"Error\",\n            text2: \"Your session has expired. Please login again.\",\n            type: \"error\"\n          });\n          throw new Error(\"No refresh token available.\");\n        }\n        var refreshedTokenResponse = yield axiosInstance.post(\"/auth/refreshToken\", {\n          refreshToken: refreshToken\n        });\n        var newAccessToken = (_refreshedTokenRespon = refreshedTokenResponse.data) == null ? void 0 : _refreshedTokenRespon.newAccessToken;\n        if (!newAccessToken) {\n          Toast.show({\n            text1: \"Error\",\n            text2: \"Failed to refresh token. Please login again.\",\n            type: \"error\"\n          });\n          throw new Error(\"No new access token received.\");\n        }\n        yield AsyncStorage.setItem(\"accessToken\", JSON.stringify(newAccessToken));\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Refresh token failed:\", refreshError);\n        Toast.show({\n          text1: \"Error\",\n          text2: \"Your session has expired. Please login again.\",\n          type: \"error\"\n        });\n        yield AsyncStorage.clear();\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return function (_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nexport default axiosInstance;","map":{"version":3,"names":["axios","config","AsyncStorage","Toast","axiosInstance","create","baseURL","interceptors","request","use","_ref","_asyncToGenerator","token","getItem","headers","Authorization","error","console","_x","apply","arguments","Promise","reject","response","_ref2","_x2","_ref3","originalRequest","reqURL","url","status","includes","_refreshedTokenRespon","refreshToken","show","text1","text2","type","Error","refreshedTokenResponse","post","newAccessToken","data","setItem","JSON","stringify","refreshError","clear","_x3"],"sources":["C:/Users/huynh/OneDrive/Desktop/ZaloFake/AppZalo_CNM/Frontend/Mobile/zalofake/src/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\nimport config from \"./config\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport Toast from \"react-native-toast-message\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: config.baseURL,\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  async (config) => {\r\n    try {\r\n      const token = await AsyncStorage.getItem(\"accessToken\");\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting access token from AsyncStorage:\", error);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  async (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    const reqURL = originalRequest.url;\r\n\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !reqURL.includes(\"/auth/login\")\r\n    ) {\r\n      try {\r\n        const refreshToken = await AsyncStorage.getItem(\"refreshToken\");\r\n        if (!refreshToken) {\r\n          Toast.show({\r\n            text1: \"Error\",\r\n            text2: \"Your session has expired. Please login again.\",\r\n            type: \"error\",\r\n          });\r\n          throw new Error(\"No refresh token available.\");\r\n        }\r\n\r\n        const refreshedTokenResponse = await axiosInstance.post(\r\n          \"/auth/refreshToken\",\r\n          {\r\n            refreshToken: refreshToken,\r\n          }\r\n        );\r\n\r\n        const newAccessToken = refreshedTokenResponse.data?.newAccessToken;\r\n        if (!newAccessToken) {\r\n          Toast.show({\r\n            text1: \"Error\",\r\n            text2: \"Failed to refresh token. Please login again.\",\r\n            type: \"error\",\r\n          });\r\n          throw new Error(\"No new access token received.\");\r\n        }\r\n\r\n        await AsyncStorage.setItem(\r\n          \"accessToken\",\r\n          JSON.stringify(newAccessToken)\r\n        );\r\n\r\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        return axiosInstance(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error(\"Refresh token failed:\", refreshError);\r\n        Toast.show({\r\n          text1: \"Error\",\r\n          text2: \"Your session has expired. Please login again.\",\r\n          type: \"error\",\r\n        });\r\n        await AsyncStorage.clear();\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}